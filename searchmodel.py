# -*- coding: utf-8 -*-
"""SearchModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GIKAAR6EXMfJvafih_b5-wWcxP6S5K0e
"""

# !pip3 install scikit-learn pandas numpy matplotlib seaborn fairlearn ucimlrepo shap
# !pip3 install torch torchvision --index-url https://download.pytorch.org/whl/cpu

import shap
import torch
import random
import numpy as np
import pandas as pd
from ucimlrepo import fetch_ucirepo
from typing import Dict, List, Tuple

import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

import torch.nn as nn
from torch.utils.data import TensorDataset, DataLoader

from fairlearn.adversarial import AdversarialFairnessClassifier
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import copy

df = pd.read_csv('items_megaset_with_sentiments.csv')
df['seller_category'] = pd.qcut(df['rating_number'], q=4, labels=['Low', 'Medium', 'High', 'Top'])
df = df.dropna()
df_out = copy.deepcopy(df)
df_out = df_out.drop(['description', 'features'], axis=1)
df = df.drop(columns=['Unnamed: 0', 'index', 'main_category', 'title', 'features', 'description', 'categories', 'store'])
df_cleaned = df.drop_duplicates()
df_cleaned.set_index('parent_asin', inplace=True)

le = LabelEncoder()
df_cleaned['seller_category'] = le.fit_transform(df_cleaned['seller_category'])

df_cleaned

seed = 42

random.seed(seed)
np.random.seed(seed)
torch.manual_seed(seed)

torch.use_deterministic_algorithms(True)

train, test = train_test_split(
    df_cleaned, train_size=0.7, random_state=seed
)

X_train_df = train.drop(columns=['seller_category'])
y_train_df = train['seller_category']
X_test_df = test.drop(columns=['seller_category'])
y_test_df = test['seller_category']

X_train = X_train_df.values
y_train = y_train_df.values

X_test = X_test_df.values
y_test = y_test_df.values

class MLPTabular(nn.Module):
    def __init__(self, input_size):
        super(MLPTabular, self).__init__()
        self.layer1 = nn.Linear(input_size, 64)
        self.dropout1 = nn.Dropout(0.3)
        self.layer2 = nn.Linear(64, 32)
        self.dropout2 = nn.Dropout(0.3)
        self.output_layer = nn.Linear(32, 4)

    def forward(self, x):
        x = torch.relu(self.layer1(x))
        x = self.dropout1(x)
        x = torch.relu(self.layer2(x))
        x = self.dropout2(x)
        x = self.output_layer(x)
        return x

X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
y_train_tensor = torch.tensor(y_train, dtype=torch.float32)
X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
y_test_tensor = torch.tensor(y_test, dtype=torch.float32)

train_dataset = TensorDataset(X_train_tensor, y_train_tensor)
test_dataset = TensorDataset(X_test_tensor, y_test_tensor)

batch_size = 32

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
val_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False)

def train_model(model, criterion, optimizer, train_loader, device):
    model.train()
    running_loss = 0.0
    correct = 0
    total = 0

    for inputs, labels in train_loader:
        # Load the inputs and labels to the training device (CPU/GPU)
        inputs = inputs.to(device)
        labels = labels.to(device).long()

        # Forward Pass and loss computation
        outputs = model(inputs)
        loss_computation = criterion(outputs, labels.squeeze())

        # Backward Pass
        optimizer.zero_grad()
        loss_computation.backward()
        optimizer.step()

        # Compute the loss and accuracy
        running_loss += loss_computation.item() * inputs.size(0)  # Accumulate the loss
        _, predictions = torch.max(outputs, 1)
        correct += (predictions == labels.squeeze()).sum().item()
        total += labels.size(0)

    epoch_loss = running_loss / len(train_loader.dataset)
    accuracy = correct / total
    return epoch_loss, accuracy

def evaluate_model(model, criterion, val_loader, device):
    model.eval()
    running_loss = 0.0
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            # Load the inputs and labels to the training device (CPU/GPU)
            inputs = inputs.to(device)
            labels = labels.to(device).long()

            # Forward Pass and loss computation
            outputs = model(inputs)
            loss_computation = criterion(outputs, labels.squeeze())

            # Compute the loss and accuracy
            running_loss += loss_computation.item() * inputs.size(0)  # Accumulate the loss
            _, predictions = torch.max(outputs, 1)
            correct += (predictions == labels.squeeze()).sum().item()
            total += labels.size(0)

    epoch_loss = running_loss / len(val_loader.dataset)
    accuracy = correct / total
    return epoch_loss, accuracy

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = MLPTabular(X_train_tensor.shape[1]).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.003)

num_epochs = 100
training_losses = []
for epoch in range(1, num_epochs + 1):
    train_loss, train_accuracy = train_model(model, criterion, optimizer, train_loader, device)
    val_loss, val_accuracy = evaluate_model(model, criterion, val_loader, device)

    if (epoch % 2) == 0:
        print(f"Epoch [{epoch}/{num_epochs}] - "
              f"Train Loss: {train_loss:.4f} - Train Accuracy: {train_accuracy:.4f} - "
              f"Val Loss: {val_loss:.4f} - Val Accuracy: {val_accuracy:.4f}")

    training_losses.append(train_loss)

model.eval()
with torch.no_grad():
    mlp_tabular_y_test_probs = model(X_test_tensor)
    _, test["mlp_tabular_preds"] = torch.max(mlp_tabular_y_test_probs, dim=1)

mlp_clf_acc = accuracy_score(test["seller_category"], test["mlp_tabular_preds"]) * 100
print(f"Accuracy of the MLP Classifier: {mlp_clf_acc:.2f}%")

plt.figure(figsize=(12, 8))
background_data = X_test_tensor[:100]
explainer = shap.GradientExplainer(model, background_data)

shap_values = explainer.shap_values(X_test_tensor)
shap.summary_plot(
    shap_values,
    X_test_df,
    plot_type="bar",
    max_display=10,
    show=True
)

plt.tight_layout()
plt.xticks(rotation=45, ha='right')
plt.savefig('shap_summary.png', bbox_inches='tight', dpi=300)
plt.close()

plt.figure(figsize=(10, 6))
plt.plot(range(1, num_epochs + 1), training_losses, label='Training Loss')
plt.title('Training Loss Over Time')
plt.xlabel('Epoch')
plt.ylabel('Average Loss')
plt.grid(True)
plt.savefig('training_loss.png')
plt.close()

model.eval()

with torch.no_grad():
    test_predictions = model(X_test_tensor)
    _, predicted_classes = torch.max(test_predictions, dim=1)

test_df = X_test_df.copy()
test_df['predicted_category'] = predicted_classes.cpu().numpy()

df_out.head()
df_out_2 = df_out[int(len(df) * 0.7):]
df_out_2['predicted_category'] = predicted_classes.cpu().numpy()

df_out_2.to_csv('test.csv', index=True)
df_out_2.head()

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, test["mlp_tabular_preds"])
sns.heatmap(cm, annot=True, fmt='d')
plt.savefig('confusion_matrix.png')
plt.close()

torch.save(model.state_dict(), 'mlp_tabular_model.pth')
